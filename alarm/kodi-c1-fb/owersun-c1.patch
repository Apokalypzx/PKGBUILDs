diff -rupN xbmc/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp xbmc-new/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp
--- xbmc/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp	2015-03-04 14:05:54.000000000 -0800
+++ xbmc-new/xbmc/windowing/egl/EGLNativeTypeAmlogic.cpp	2015-04-04 13:23:11.070074697 -0700
@@ -26,6 +26,7 @@
 
 #include <stdio.h>
 #include <stdlib.h>
+#include <fstream>
 #include <linux/fb.h>
 #include <sys/ioctl.h>
 #include <EGL/egl.h>
@@ -87,9 +88,11 @@ bool CEGLNativeTypeAmlogic::CreateNative
   fbdev_window *nativeWindow = new fbdev_window;
   if (!nativeWindow)
     return false;
+  RESOLUTION_INFO res;
+  GetPreferredResolution(&res);
 
-  nativeWindow->width = 1280;
-  nativeWindow->height = 720;
+  nativeWindow->width = res.iWidth;
+  nativeWindow->height = res.iHeight;
   m_nativeWindow = nativeWindow;
   return true;
 #else
@@ -137,11 +140,10 @@ bool CEGLNativeTypeAmlogic::SetNativeRes
 {
   switch((int)(0.5 + res.fRefreshRate))
   {
-    default:
+    case 30:
     case 60:
       switch(res.iScreenWidth)
       {
-        default:
         case 1280:
           SetDisplayResolution("720p");
           break;
@@ -153,10 +155,10 @@ bool CEGLNativeTypeAmlogic::SetNativeRes
           break;
       }
       break;
+    case 25:
     case 50:
       switch(res.iScreenWidth)
       {
-        default:
         case 1280:
           SetDisplayResolution("720p50hz");
           break;
@@ -168,13 +170,27 @@ bool CEGLNativeTypeAmlogic::SetNativeRes
           break;
       }
       break;
-    case 30:
-      SetDisplayResolution("1080p30hz");
-      break;
     case 24:
       SetDisplayResolution("1080p24hz");
       break;
   }
+  int fd0;
+  std::string framebuffer = "/dev/" + m_framebuffer_name;
+  if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
+  {
+    struct fb_var_screeninfo vinfo;
+    if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
+    {
+      vinfo.xres = res.iWidth;
+      vinfo.yres = res.iHeight;
+      vinfo.xres_virtual = vinfo.xres;
+      vinfo.yres_virtual = vinfo.yres*2;
+      vinfo.bits_per_pixel = 32;
+      vinfo.activate = FB_ACTIVATE_ALL;
+      ioctl(fd0, FBIOPUT_VSCREENINFO, &vinfo);
+    }
+    close(fd0);
+  }
 
   return true;
 }
@@ -183,7 +199,29 @@ bool CEGLNativeTypeAmlogic::ProbeResolut
 {
   std::string valstr;
   SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/disp_cap", valstr);
-  std::vector<std::string> probe_str = StringUtils::Split(valstr, "\n");
+  std::vector<std::string> probe_str;
+  std::string resentry;
+  std::ifstream resfile ("/etc/kodi-resolutions.conf");
+  if (resfile.is_open()) {
+    while (getline(resfile,resentry)) {
+      if (!resentry.empty()) {
+        probe_str.push_back(resentry);
+      }
+    }
+  } else { //Explicitly add resolutions if file read fails.
+  //NTFS Resolutions
+  //Disable for PAL displays!
+  probe_str.push_back("720p");
+  probe_str.push_back("1080p24hz");
+  probe_str.push_back("1080p");
+  probe_str.push_back("1080i60hz");
+
+  //PAL Resolutions.
+  //Disable for NTFS displays!
+  //probe_str.push_back("720p50hz");
+  //probe_str.push_back("1080p50hz");
+  //probe_str.push_back("1080i50hz");
+  }
 
   resolutions.clear();
   RESOLUTION_INFO res;
@@ -220,7 +258,7 @@ bool CEGLNativeTypeAmlogic::SetDisplayRe
   std::string mode = resolution;
   // switch display resolution
   SysfsUtils::SetString("/sys/class/display/mode", mode.c_str());
-  SetupVideoScaling(mode.c_str());
+  // SetupVideoScaling(mode.c_str());
 
   return true;
 }
@@ -282,26 +320,34 @@ void CEGLNativeTypeAmlogic::DisableFreeS
   // turn off frame buffer freescale
   SysfsUtils::SetInt("/sys/class/graphics/fb0/free_scale", 0);
   SysfsUtils::SetInt("/sys/class/graphics/fb1/free_scale", 0);
-  SysfsUtils::SetString("/sys/class/graphics/fb0/free_scale_axis", "0 0 1279 719");
-
-  SysfsUtils::SetInt("/sys/class/ppmgr/ppscaler", 0);
-  SysfsUtils::SetInt("/sys/class/video/disable_video", 0);
+  
+  //SysfsUtils::SetString("/sys/class/graphics/fb0/free_scale_axis", "0 0 1279 719");
+  //
+  //SysfsUtils::SetInt("/sys/class/ppmgr/ppscaler", 0);
+  //SysfsUtils::SetInt("/sys/class/video/disable_video", 0);
   // now default video display to off
-  SysfsUtils::SetInt("/sys/class/video/disable_video", 1);
-
+  //SysfsUtils::SetInt("/sys/class/video/disable_video", 1);
+  //
   // revert display axis
-  int fd0;
-  std::string framebuffer = "/dev/" + m_framebuffer_name;
-
-  if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
-  {
-    struct fb_var_screeninfo vinfo;
-    if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
-    {
-      char daxis_str[256] = {0};
-      sprintf(daxis_str, "%d %d %d %d 0 0 0 0", 0, 0, vinfo.xres-1, vinfo.yres-1);
-      SysfsUtils::SetString("/sys/class/display/axis", daxis_str);
-    }
-    close(fd0);
-  }
+  //int fd0;
+  //std::string framebuffer = "/dev/" + m_framebuffer_name;
+  //
+  //if ((fd0 = open(framebuffer.c_str(), O_RDWR)) >= 0)
+  //{
+  //  struct fb_var_screeninfo vinfo;
+  //  if (ioctl(fd0, FBIOGET_VSCREENINFO, &vinfo) == 0)
+  //  {
+  //    char daxis_str[256] = {0};
+  //    sprintf(daxis_str, "%d %d %d %d 0 0 0 0", 0, 0, vinfo.xres-1, vinfo.yres-1);
+  //    SysfsUtils::SetString("/sys/class/display/axis", daxis_str);
+  //  }
+  //  close(fd0);
+  //}
+}
+
+bool CEGLNativeTypeAmlogic::IsHdmiConnected() const
+{
+  std::string hpd_state;
+  SysfsUtils::GetString("/sys/class/amhdmitx/amhdmitx0/hpd_state", hpd_state);
+  return hpd_state.at(0) == '1';
 }
diff -rupN xbmc/xbmc/windowing/egl/EGLNativeTypeAmlogic.h xbmc-new/xbmc/windowing/egl/EGLNativeTypeAmlogic.h
--- xbmc/xbmc/windowing/egl/EGLNativeTypeAmlogic.h	2015-03-04 14:05:54.000000000 -0800
+++ xbmc-new/xbmc/windowing/egl/EGLNativeTypeAmlogic.h	2015-03-08 13:00:15.062012878 -0700
@@ -55,4 +55,5 @@ protected:
 
 private:
   std::string m_framebuffer_name;
+  bool IsHdmiConnected() const;
 };
